#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Aug  4 23:15:40 2022

@author: Don
"""
# lib
import hashlib

# func
def mod_binary(g,k,n):
    # out: g^k mod n
    bk = bin(k)[2:]
    y = 1
    for i in bk:
        y = y * y % n
        if i == '1':
            y = y * g % n
    return y

def rsaEnc(m, n, e):
    return mod_binary(m, e, n)

def rsaDec(c, n, d):
    return mod_binary(c, d, n)

import hashlib,binascii
def mgf(D, oLen):
    if len(D) % 2 == 1:
        D = b'0' + D
    m = binascii.unhexlify(D)
    return hashlib.shake_128(m).hexdigest(oLen)

def xor(x, y):
    import binascii
    bx = binascii.unhexlify(x)
    by = binascii.unhexlify(y)
    bz = bytes(a ^ b for a, b in zip(bx, by))
    return binascii.hexlify(bz)

def rsa_oaep_Enc(m, k0, k1, k2, lHASH, r, e, n):
    m = str(hex(m)[2:]).encode()
    lHASH = str(hex(lHASH)[2:]).encode()
    r = str(hex(r)[2:]).encode()
    PS = b'00'*k1
    
    padm = lHASH + PS + b'01' + m
    s = xor(mgf(r,k0+k1+k2+1), padm)
    t = xor(mgf(s,k0), r)
    w = b'00' + t + s
    print(w)
    print(t, '\n', s)
    cipher = rsaEnc(int(w.decode(), 16), n, e)
    return cipher
    
def rsa_oaep_Dec(C, k0, k1, k2, r_oaep, d, n):
    w = rsaDec(C,n,d)
    w = str(hex(w)[2:]).encode()
    if w[-1].to_bytes(1, 'little') != b'0':
        return None
    t = w[0:2*k0]
    s = w[2*k0:len(w)]
    r = xor(mgf(s, k0), t)
    if int(r.decode(), 16) != r_oaep:
        return None
    z = xor(mgf(r, k0+k1+k2+1), s)
    m = z[0:2*k2]
    return int(m.decode(), 16)

#表D.18の正しい秘密鍵d
d=194029196218404823100878341486599586553929803495781922540631094965683972732719369714347378484802993367392847632878880315904675189890522971180699668529293978805836195961066636722393471330811217637038507178478277158059285682886916747230509049424044174909086465857952582031653037410989525857282944526744054710797114145760694671801287919684605304702607669535495216277150488346874106692722634363740946326334976606565202715426840963850587414465655111976049815701381365200279507956532158499770777241267285312592949708005269748891531459951700760347310449924008747893111677726101615825583753825438733962117573507841058219373
n=25670347309838500937358986955100846731788156598839569590259709322256623677033941518668438605665627422161027494145018418760505172460665734801779580871692650038634892670155784177317984594849856702689560964981188912083541134907229931853091690746198513144637323504850580954579557618596096558122132358674252295786260220619278736348308644071970521860058968502838254433878379575196127456206228279624788532497792871645801317220171117651760753078221582357127409585748440039412137046975269719242530796157957533215961548831411410512012417050753369857414097034429157025737884425279622488756638339952826191879389755680193590191281
e=16906953396398285953
roaep_160 = 788255724614721016190591162463944054696650907899
K1_dec=184221027786996110364334859372875060126
lHASH = 1245845410931227995499360226027473197403882391305
k0 = 20
k1 = 70
k2 = 16

c = rsa_oaep_Enc(K1_dec, k0, k1, k2, lHASH, roaep_160, e, n)
m = rsa_oaep_Dec(c, k0, k1, k2, roaep_160, d, n)